name: "Deployment"
env:
  AWS_REGION: af-south-1

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  terraform:
    permissions:
      id-token: write
      contents: read
    name: "Manage AWS Resources"
    runs-on: ubuntu-latest
    outputs:
      ec2host: ${{ steps.tf_outputs.outputs.ec2host }}
    defaults:
      run:
        working-directory: terraform
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::683044484462:role/github-oidc
          aws-region: ${{ env.AWS_REGION }}

      - name: Ensure S3 bucket exists for backend
        run: |
          BUCKET_NAME="instamastadongram-tf-state"
          REGION="${{ env.AWS_REGION }}"

          if ! aws s3api head-bucket --bucket "$BUCKET_NAME" 2>/dev/null; then
            echo "Bucket does not exist. Creating..."
            aws s3api create-bucket --bucket "$BUCKET_NAME" --region "$REGION" \
              --create-bucket-configuration LocationConstraint="$REGION"
          else
            echo "Bucket already exists."
          fi

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.0.1
          terraform_wrapper: false

      - name: Terraform Init
        id: init
        run: terraform init -backend-config="bucket=instamastadongram-tf-state" -backend-config="key=tf-state.tf" -backend-config="region=${{ env.AWS_REGION }}"

      - name: Terraform Apply
        run: terraform apply -auto-approve

      - name: Capture Terraform Outputs
        id: tf_outputs
        run: |
          echo "ec2host=$(terraform output -raw ec2_host)" >> $GITHUB_OUTPUT

  build-api:
    name: Build API
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install required dependencies
        run: npm install
        working-directory: server

      - name: Package application
        working-directory: server
        run: |
          mkdir -p api-build
          cp -r src api-build/
          cp package.json api-build/
          cp package-lock.json api-build/ || true
          cp .env.example api-build/ || true
          zip -r api-build.zip api-build

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: api-build
          path: server/api-build.zip

  deploy-api:
    name: Deploy API to EC2
    permissions:
      id-token: write
      contents: read
    needs:
      - build-api
      - terraform
      - setup-databases
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::683044484462:role/github-oidc
          aws-region: ${{ env.AWS_REGION }}

      - name: Get secrets from AWS Key Store
        uses: aws-actions/aws-secretsmanager-get-secrets@v2
        with:
          secret-ids: |
            EC2_PRIVATE_KEY, privatekey
            GOOGLE_CLIENT_ID, googleclientid
            GOOGLE_CLIENT_SECRET, googleclientsecret
            GOOGLE_CALLBACK_URL, googlecallbackurl
            SESSION_SECRET, sessionsecret
            DOMAIN, domainurl
            FRONTEND_URI, frontenduri

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: api-build

      - name: Setup private key
        run: |
          echo "${{ env.EC2_PRIVATE_KEY }}" > privatekey.pem
          chmod 0500 privatekey.pem

      - name: Set env variables
        run: |
          EC2_HOST=${{ needs.terraform.outputs.ec2host }}
          ssh -o StrictHostKeyChecking=no -i privatekey.pem ubuntu@$EC2_HOST 'bash -s' <<'EOF'
          sudo tee /etc/environment > /dev/null <<'ENV_VAR'
          GOOGLE_CLIENT_ID=${{ env.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET=${{ env.GOOGLE_CLIENT_SECRET }}
          GOOGLE_CALLBACK_URL=${{ env.GOOGLE_CALLBACK_URL }}
          SESSION_SECRET=${{ env.SESSION_SECRET }}
          DOMAIN=${{ env.DOMAIN }}
          FRONTEND_URI=${{ env.FRONTEND_URI }}
          
          ENV_VAR
          EOF

      - name: Deploy
        run: |
          EC2_HOST=${{ needs.terraform.outputs.ec2host }}
          scp -o StrictHostKeyChecking=no -i privatekey.pem ./api-build.zip "ubuntu@$EC2_HOST:api-build.zip"

          ssh -o StrictHostKeyChecking=no -i privatekey.pem "ubuntu@$EC2_HOST" ' 
          sudo apt-get update &&
          sudo apt-get install -y unzip curl &&

          curl -fsSL https://deb.nodesource.com/setup_22.x | sudo -E bash - &&
          sudo apt-get install -y nodejs &&

          sudo npm install -g pm2 &&

          unzip -o api-build.zip &&

          cd api-build/ &&

          npm install &&

          # Stop and delete existing pm2 process if it exists
          if pm2 list | grep -q "instamastadongram-api"; then
            pm2 delete instamastadongram-api;
          fi &&

          pm2 start npm --name instamastadongram-api -- run prod
          '
  setup-databases:
    name: Setup MongoDB and Redis
    permissions:
      id-token: write
      contents: read
    needs:
      - terraform
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::683044484462:role/github-oidc
          aws-region: ${{ env.AWS_REGION }}

      - name: Get secrets from AWS Key Store
        uses: aws-actions/aws-secretsmanager-get-secrets@v2
        with:
          secret-ids: |
            EC2_PRIVATE_KEY, privatekey

      - name: Setup private key
        run: |
          echo "${{ env.EC2_PRIVATE_KEY }}" > privatekey.pem
          chmod 0500 privatekey.pem

      - name: Install MongoDB and Redis on EC2
        run: |
          EC2_HOST=${{ needs.terraform.outputs.ec2host }}

          ssh -o StrictHostKeyChecking=no -i privatekey.pem "ubuntu@$EC2_HOST" 'bash -s' <<'EOF'
          # Install Redis
          sudo apt install redis-server -y
          sudo systemctl enable redis-server
          sudo systemctl start redis-server

          # Install MongoDB
          sudo apt-get install -y gnupg curl
          curl -fsSL https://www.mongodb.org/static/pgp/server-8.0.asc | \
          sudo gpg -o /usr/share/keyrings/mongodb-server-8.0.gpg \
          --dearmor
          echo "deb [ arch=amd64,arm64 signed-by=/usr/share/keyrings/mongodb-server-8.0.gpg ] https://repo.mongodb.org/apt/ubuntu noble/mongodb-org/8.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-8.0.list
          sudo apt-get update
          sudo apt install -y mongodb-org
          sudo systemctl enable mongod
          sudo systemctl start mongod

          # Confirm both services are running
          systemctl status redis-server
          systemctl status mongod
          EOF

  build-frontend:
    name: Build Frontend
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::683044484462:role/github-oidc
          aws-region: ${{ env.AWS_REGION }}

      - name: Get secrets from AWS Key Store
        uses: aws-actions/aws-secretsmanager-get-secrets@v2
        with:
          secret-ids: |
            VITE_BACKEND_URL, vitebackendurl

      - name: Set up Vite environment variables
        working-directory: frontend
        run: |
          echo "VITE_BACKEND_URL=${{ env.VITE_BACKEND_URL }}" > .env

      - name: Install required dependencies
        run: npm install --force
        working-directory: frontend

      - name: Build application
        run: npm run build
        working-directory: frontend

      - name: Package application
        working-directory: frontend
        run: |
          mkdir -p frontend-build
          cp -r dist frontend-build/
          cp package.json frontend-build/
          zip -r frontend-build.zip frontend-build

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/frontend-build.zip

  deploy-frontend:
    name: Deploy Frontend to EC2
    permissions:
      id-token: write
      contents: read
    needs: 
      - build-frontend
      - terraform
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::683044484462:role/github-oidc
          aws-region: ${{ env.AWS_REGION }}

      - name: Get secrets from AWS Key Store
        uses: aws-actions/aws-secretsmanager-get-secrets@v2
        with:
          secret-ids: |
            EC2_PRIVATE_KEY, privatekey

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-build

      - name: Setup private key
        run: |
          echo "${{ env.EC2_PRIVATE_KEY }}" > privatekey.pem
          chmod 0500 privatekey.pem

      - name: Deploy
        run: |
          EC2_HOST=${{ needs.terraform.outputs.ec2host }}
          scp -o StrictHostKeyChecking=no -i privatekey.pem ./frontend-build.zip "ubuntu@$EC2_HOST:~/frontend-build.zip"

          ssh -o StrictHostKeyChecking=no -i privatekey.pem "ubuntu@$EC2_HOST" '
            sudo apt-get update &&
            sudo apt-get install -y unzip &&
            unzip -o frontend-build.zip &&
            sudo rm -rf /var/www/html/* &&
            sudo cp -r frontend-build/dist/* /var/www/html/
          '

  issue-certificates:
    needs:
      - deploy-api
      - deploy-frontend
      - terraform
    permissions:
      id-token: write
      contents: read
    name: Issue Certificates
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::683044484462:role/github-oidc
          aws-region: ${{ env.AWS_REGION }}

      - name: Get secrets from AWS Key Store
        uses: aws-actions/aws-secretsmanager-get-secrets@v2
        with:
          secret-ids: |
            EC2_PRIVATE_KEY, privatekey

      - name: Setup private key
        run: |
          echo "${{ env.EC2_PRIVATE_KEY }}" > privatekey.pem
          chmod 0500 privatekey.pem

      - name: Setup nginx proxy
        run: |
          EC2_HOST=${{ needs.terraform.outputs.ec2host }}

          ssh -o StrictHostKeyChecking=no -i privatekey.pem ubuntu@$EC2_HOST 'bash -s' <<'EOF'

            sudo apt-get update
            sudo apt-get install -y nginx

            sudo tee /etc/nginx/sites-enabled/default > /dev/null <<'NGINX_CONF'
            server {
              listen 80;
              server_name bbd-grad-program-2025.online www.bbd-grad-program-2025.online;

              client_max_body_size 100M;

              # certbot challenge
              location /.well-known/acme-challenge/ {
                root /var/www/html;
              }

              # redirect everything else to HTTPS
              location / {
                return 301 https://$host$request_uri;
              }
            }

            server {
              listen 443 ssl;
              server_name bbd-grad-program-2025.online www.bbd-grad-program-2025.online;

              ssl_certificate /etc/letsencrypt/live/bbd-grad-program-2025.online/fullchain.pem;
              ssl_certificate_key /etc/letsencrypt/live/bbd-grad-program-2025.online/privkey.pem;

              client_max_body_size 100M;

              location / {
                root /var/www/html;
                index index.html;
                try_files $uri $uri/ /index.html;
              }

              location /api/ {
                proxy_pass http://localhost:8000;
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection 'upgrade';
                proxy_set_header Host $host;
                proxy_cache_bypass $http_upgrade;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;

                proxy_read_timeout 300s;
                proxy_send_timeout 300s;
              }

              location /.well-known/webfinger {
                proxy_pass http://localhost:8000;
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection 'upgrade';
                proxy_set_header Host $host;
                proxy_cache_bypass $http_upgrade;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
              }
            }
            NGINX_CONF
          EOF

      - name: Verify and Reload nginx
        run: |
          EC2_HOST=${{ needs.terraform.outputs.ec2host }}
          ssh -o StrictHostKeyChecking=no -i privatekey.pem "ubuntu@$EC2_HOST" ' 
            sudo nginx -t && sudo systemctl reload nginx
          '

      - name: Cerbot
        run: |
          EC2_HOST=${{ needs.terraform.outputs.ec2host }}
          ssh -o StrictHostKeyChecking=no -i privatekey.pem "ubuntu@$EC2_HOST" ' 
            sudo apt install certbot python3-certbot-nginx -y &&
            sudo certbot --nginx -d bbd-grad-program-2025.online -d www.bbd-grad-program-2025.online --non-interactive --agree-tos --email liam.barkley@bbd.co.za
          '
