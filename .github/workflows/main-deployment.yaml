name: Build and Push to ECR

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  PROJECT_NAME: ${{ vars.ECR_REPOSITORY }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.0.1
          terraform_wrapper: false

      - name: Terraform Init
        run: |
          cd terraform
          terraform init

      - name: Get EC2 Instance ID
        id: ec2-instance
        run: |
          cd terraform
          INSTANCE_ID=$(terraform output -raw instance_id 2>/dev/null || echo "")
          if [ -z "$INSTANCE_ID" ]; then
            echo "Could not get EC2 instance ID from Terraform output"
            exit 1
          fi
          echo "instance_id=$INSTANCE_ID" >> $GITHUB_OUTPUT
          echo "EC2 Instance ID: $INSTANCE_ID"

      - name: Get EC2 public IP
        id: ec2-ip
        run: |
          cd terraform
          PUBLIC_IP=$(terraform output -raw public_ip 2>/dev/null || echo "")
          if [ -z "$PUBLIC_IP" ]; then
            echo "Could not get EC2 public IP from Terraform output"
            exit 1
          fi
          echo "public_ip=$PUBLIC_IP" >> $GITHUB_OUTPUT
          echo "EC2 Public IP: $PUBLIC_IP"

      - name: Deploy to EC2
        run: |
          echo "Starting simple deployment to EC2..."

          # Deploy using SSM
          aws ssm send-command \
            --instance-ids ${{ steps.ec2-instance.outputs.instance_id }} \
            --document-name "AWS-RunShellScript" \
            --parameters 'commands=[
              "echo === Starting Deployment ===",
              "sudo yum update -y",
              "curl -fsSL https://rpm.nodesource.com/setup_22.x | sudo bash -",
              "sudo yum install -y nodejs git",
              "sudo npm install -g pm2",
              "sudo mkdir -p /opt/instamastadongram",
              "sudo chown ec2-user:ec2-user /opt/instamastadongram",
              "cd /opt/instamastadongram",
              "rm -rf * || true",
              "git clone https://github.com/${{ github.repository }}.git .",
              "cd server && npm install && cd ..",
              "cd frontend && npm install && npm run build && cd ..",
              "echo \"PORT=8000\" > server/.env",
              "echo \"MONGO_URI=mongodb://localhost:27017/instaMastadonGram\" >> server/.env",
              "echo \"SESSION_SECRET=${{ secrets.SESSION_SECRET }}\" >> server/.env",
              "echo \"GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}\" >> server/.env",
              "echo \"GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}\" >> server/.env",
              "echo \"GOOGLE_CALLBACK_URL=http://${{ steps.ec2-ip.outputs.public_ip }}:8000/auth/google/callback\" >> server/.env",
              "sudo tee /etc/yum.repos.d/mongodb-org.repo << '\''EOF'\''",
              "[mongodb-org-7.0]",
              "name=MongoDB Repository",
              "baseurl=https://repo.mongodb.org/yum/amazon/2/mongodb-org/7.0/x86_64/",
              "gpgcheck=1",
              "enabled=1",
              "gpgkey=https://www.mongodb.org/static/pgp/server-7.0.asc",
              "EOF",
              "sudo yum install -y mongodb-org",
              "sudo systemctl start mongod",
              "sudo systemctl enable mongod",
              "sleep 10",
              "pm2 delete all || true",
              "cd /opt/instamastadongram/server && pm2 start npm --name backend -- start",
              "cd /opt/instamastadongram/frontend && pm2 start npm --name frontend -- run preview -- --port 80 --host 0.0.0.0",
              "pm2 save",
              "pm2 startup",
              "echo === Deployment completed ===",
              "pm2 status"
            ]' \
            --region ${{ env.AWS_REGION }}

          # Wait for deployment to complete
          sleep 60

          # Check deployment status
          echo "Checking deployment status..."
          aws ssm send-command \
            --instance-ids ${{ steps.ec2-instance.outputs.instance_id }} \
            --document-name "AWS-RunShellScript" \
            --parameters 'commands=[
              "echo === PM2 Status ===",
              "pm2 status",
              "echo === Process Status ===",
              "ps aux | grep -E '\''(node|pm2)'\''",
              "echo === Network Status ===",
              "netstat -tlnp | grep -E '\'':(80|8000|27017)'\''",
              "echo === MongoDB Status ===",
              "sudo systemctl status mongod",
              "echo === Application Logs ===",
              "pm2 logs --lines 10"
            ]' \
            --region ${{ env.AWS_REGION }}

      - name: Wait for deployment
        run: |
          echo "Waiting 30 seconds for applications to start..."
          sleep 30

      - name: Health check backend
        run: |
          echo "Checking backend health at http://${{ steps.ec2-ip.outputs.public_ip }}:8000/health"
          for i in {1..10}; do
            if curl -f -s http://${{ steps.ec2-ip.outputs.public_ip }}:8000/health > /dev/null; then
              echo "Backend health check passed"
              break
            else
              echo "Backend health check attempt $i/10 failed, retrying in 5 seconds..."
              if [ $i -eq 10 ]; then
                echo "Backend health check failed after 10 attempts"
                exit 1
              fi
              sleep 5
            fi
          done

      - name: Health check frontend
        run: |
          echo "Checking frontend health at http://${{ steps.ec2-ip.outputs.public_ip }}"
          for i in {1..10}; do
            if curl -f -s http://${{ steps.ec2-ip.outputs.public_ip }} > /dev/null; then
              echo "Frontend health check passed"
              break
            else
              echo "Frontend health check attempt $i/10 failed, retrying in 5 seconds..."
              if [ $i -eq 10 ]; then
                echo "Frontend health check failed after 10 attempts"
                exit 1
              fi
              sleep 5
            fi
          done

      - name: Deployment summary
        run: |
          echo "Simple Deployment Completed Successfully!"
          echo ""
          echo "Application Details:"
          echo "   Application URL: http://${{ steps.ec2-ip.outputs.public_ip }}"
          echo "   Backend API: http://${{ steps.ec2-ip.outputs.public_ip }}:8000"
          echo ""
          echo "All health checks passed!"
          echo "Application is live and ready for use!"
