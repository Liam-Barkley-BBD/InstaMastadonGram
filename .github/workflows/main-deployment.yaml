name: Build and Push to ECR

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  PROJECT_NAME: ${{ vars.ECR_REPOSITORY }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Get ECR repository URLs
        id: ecr-repos
        run: |
          BACKEND_REPO_URL=$(aws ecr describe-repositories --repository-names "${PROJECT_NAME}-backend" --region $AWS_REGION --query 'repositories[0].repositoryUri' --output text)
          FRONTEND_REPO_URL=$(aws ecr describe-repositories --repository-names "${PROJECT_NAME}-frontend" --region $AWS_REGION --query 'repositories[0].repositoryUri' --output text)
          echo "backend_repo_url=$BACKEND_REPO_URL" >> $GITHUB_OUTPUT
          echo "frontend_repo_url=$FRONTEND_REPO_URL" >> $GITHUB_OUTPUT

      - name: Generate version tag
        id: version
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "version=pr-${{ github.event.number }}-${{ github.sha }}" >> $GITHUB_OUTPUT
          else
            echo "version=${{ github.sha }}" >> $GITHUB_OUTPUT
          fi

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ steps.ecr-repos.outputs.backend_repo_url }}:${{ steps.version.outputs.version }}
            ${{ steps.ecr-repos.outputs.backend_repo_url }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./frontend/Dockerfile
          push: true
          tags: |
            ${{ steps.ecr-repos.outputs.frontend_repo_url }}:${{ steps.version.outputs.version }}
            ${{ steps.ecr-repos.outputs.frontend_repo_url }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Output image URLs
        run: |
          echo "Backend image: ${{ steps.ecr-repos.outputs.backend_repo_url }}:${{ steps.version.outputs.version }}"
          echo "Frontend image: ${{ steps.ecr-repos.outputs.frontend_repo_url }}:${{ steps.version.outputs.version }}"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.0.1
          terraform_wrapper: false

      - name: Terraform Init
        id: init
        run: |
          cd terraform
          terraform init

      - name: Get EC2 public IP
        id: ec2-ip
        run: |
          cd terraform
          PUBLIC_IP=$(terraform output -raw public_ip 2>/dev/null || echo "")
          if [ -z "$PUBLIC_IP" ]; then
            echo "Could not get EC2 public IP from Terraform output"
            exit 1
          fi
          echo "public_ip=$PUBLIC_IP" >> $GITHUB_OUTPUT
          echo "EC2 Public IP: $PUBLIC_IP"

      - name: Get EC2 Instance ID
        id: ec2-instance
        run: |
          cd terraform
          INSTANCE_ID=$(terraform output -raw instance_id 2>/dev/null || echo "")
          if [ -z "$INSTANCE_ID" ]; then
            echo "Could not get EC2 instance ID from Terraform output"
            exit 1
          fi
          echo "instance_id=$INSTANCE_ID" >> $GITHUB_OUTPUT
          echo "EC2 Instance ID: $INSTANCE_ID"

      - name: Deploy to EC2 using SSM
        run: |
          echo "Starting automated deployment to EC2 using AWS Systems Manager..."

          # Create deployment script
          cat > deploy-ec2.sh << 'EOF'
          #!/bin/bash
          set -e

          echo "Starting deployment on EC2 using Docker Compose..."

          # Login to ECR
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ steps.ecr-repos.outputs.backend_repo_url }}

          echo "Stopping existing containers..."
          docker compose -f docker-compose.prod.yaml down || true

          echo "Pulling new images..."
          docker pull ${{ steps.ecr-repos.outputs.backend_repo_url }}:${{ steps.version.outputs.version }}
          docker pull ${{ steps.ecr-repos.outputs.frontend_repo_url }}:${{ steps.version.outputs.version }}

          echo "Setting up environment variables for production deployment..."
          export BACKEND_IMAGE="${{ steps.ecr-repos.outputs.backend_repo_url }}:${{ steps.version.outputs.version }}"
          export FRONTEND_IMAGE="${{ steps.ecr-repos.outputs.frontend_repo_url }}:${{ steps.version.outputs.version }}"
          export MONGO_ROOT_USERNAME="${{ secrets.MONGO_ROOT_USERNAME }}"
          export MONGO_ROOT_PASSWORD="${{ secrets.MONGO_ROOT_PASSWORD }}"
          export MONGO_DATABASE="${{ secrets.MONGO_DATABASE }}"
          export SESSION_SECRET="${{ secrets.SESSION_SECRET }}"
          export GOOGLE_CLIENT_ID="${{ secrets.GOOGLE_CLIENT_ID }}"
          export GOOGLE_CLIENT_SECRET="${{ secrets.GOOGLE_CLIENT_SECRET }}"
          export GOOGLE_CALLBACK_URL="${{ secrets.GOOGLE_CALLBACK_URL }}"

          echo "Starting services with Docker Compose..."
          docker compose -f docker-compose.prod.yaml up -d

          echo "Deployment completed successfully!"
          EOF

          # Copy files to EC2 using SSM
          echo "Copying deployment files to EC2..."
          aws ssm send-command \
            --instance-ids ${{ steps.ec2-instance.outputs.instance_id }} \
            --document-name "AWS-RunShellScript" \
            --parameters 'commands=["mkdir -p ~/deployment"]' \
            --region ${{ env.AWS_REGION }}

          # Wait for command to complete
          sleep 10

          # Create a simple deployment script on EC2
          echo "Creating deployment script on EC2..."
          aws ssm send-command \
            --instance-ids ${{ steps.ec2-instance.outputs.instance_id }} \
            --document-name "AWS-RunShellScript" \
            --parameters 'commands=[
              "echo \"#!/bin/bash\" > ~/deployment/deploy-ec2.sh",
              "echo \"set -e\" >> ~/deployment/deploy-ec2.sh",
              "echo \"echo Starting deployment on EC2 using Docker Compose...\" >> ~/deployment/deploy-ec2.sh",
              "echo \"aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ steps.ecr-repos.outputs.backend_repo_url }}\" >> ~/deployment/deploy-ec2.sh",
              "echo \"echo Stopping existing containers...\" >> ~/deployment/deploy-ec2.sh",
              "echo \"docker compose -f docker-compose.prod.yaml down || true\" >> ~/deployment/deploy-ec2.sh",
              "echo \"echo Pulling new images...\" >> ~/deployment/deploy-ec2.sh",
              "echo \"docker pull ${{ steps.ecr-repos.outputs.backend_repo_url }}:${{ steps.version.outputs.version }}\" >> ~/deployment/deploy-ec2.sh",
              "echo \"docker pull ${{ steps.ecr-repos.outputs.frontend_repo_url }}:${{ steps.version.outputs.version }}\" >> ~/deployment/deploy-ec2.sh",
              "echo \"echo Setting up environment variables...\" >> ~/deployment/deploy-ec2.sh",
              "echo \"export BACKEND_IMAGE=\\\"${{ steps.ecr-repos.outputs.backend_repo_url }}:${{ steps.version.outputs.version }}\\\"\" >> ~/deployment/deploy-ec2.sh",
              "echo \"export FRONTEND_IMAGE=\\\"${{ steps.ecr-repos.outputs.frontend_repo_url }}:${{ steps.version.outputs.version }}\\\"\" >> ~/deployment/deploy-ec2.sh",
              "echo \"export MONGO_ROOT_USERNAME=\\\"${{ secrets.MONGO_ROOT_USERNAME }}\\\"\" >> ~/deployment/deploy-ec2.sh",
              "echo \"export MONGO_ROOT_PASSWORD=\\\"${{ secrets.MONGO_ROOT_PASSWORD }}\\\"\" >> ~/deployment/deploy-ec2.sh",
              "echo \"export MONGO_DATABASE=\\\"${{ secrets.MONGO_DATABASE }}\\\"\" >> ~/deployment/deploy-ec2.sh",
              "echo \"export SESSION_SECRET=\\\"${{ secrets.SESSION_SECRET }}\\\"\" >> ~/deployment/deploy-ec2.sh",
              "echo \"export GOOGLE_CLIENT_ID=\\\"${{ secrets.GOOGLE_CLIENT_ID }}\\\"\" >> ~/deployment/deploy-ec2.sh",
              "echo \"export GOOGLE_CLIENT_SECRET=\\\"${{ secrets.GOOGLE_CLIENT_SECRET }}\\\"\" >> ~/deployment/deploy-ec2.sh",
              "echo \"export GOOGLE_CALLBACK_URL=\\\"${{ secrets.GOOGLE_CALLBACK_URL }}\\\"\" >> ~/deployment/deploy-ec2.sh",
              "echo \"echo Starting services with Docker Compose...\" >> ~/deployment/deploy-ec2.sh",
              "echo \"docker compose -f docker-compose.prod.yaml up -d\" >> ~/deployment/deploy-ec2.sh",
              "echo \"echo Deployment completed successfully!\" >> ~/deployment/deploy-ec2.sh"
            ]' \
            --region ${{ env.AWS_REGION }}

          # Wait for command to complete
          sleep 10

          # Copy docker-compose.prod.yaml to EC2
          echo "Copying docker-compose.prod.yaml to EC2..."
          aws ssm send-command \
            --instance-ids ${{ steps.ec2-instance.outputs.instance_id }} \
            --document-name "AWS-RunShellScript" \
            --parameters 'commands=[
              "cat > ~/deployment/docker-compose.prod.yaml << '\''EOF'\''",
              "version: '\''3.8'\''",
              "services:",
              "  mongodb:",
              "    image: mongo:7.0",
              "    container_name: instamastadongram-mongodb",
              "    restart: unless-stopped",
              "    environment:",
              "      MONGO_INITDB_ROOT_USERNAME: \"${{ secrets.MONGO_ROOT_USERNAME }}\"",
              "      MONGO_INITDB_ROOT_PASSWORD: \"${{ secrets.MONGO_ROOT_PASSWORD }}\"",
              "      MONGO_INITDB_DATABASE: \"${{ secrets.MONGO_DATABASE }}\"",
              "    volumes:",
              "      - mongodb_data:/data/db",
              "    networks:",
              "      - app-network",
              "    healthcheck:",
              "      test: [\"CMD\", \"mongosh\", \"--eval\", \"db.adminCommand('\''ping'\'')\"]",
              "      interval: 30s",
              "      timeout: 10s",
              "      retries: 3",
              "",
              "  backend:",
              "    image: \"${{ steps.ecr-repos.outputs.backend_repo_url }}:${{ steps.version.outputs.version }}\"",
              "    container_name: instamastadongram-backend",
              "    restart: unless-stopped",
              "    environment:",
              "      - PORT=8000",
              "      - MONGO_URI=mongodb://${{ secrets.MONGO_ROOT_USERNAME }}:${{ secrets.MONGO_ROOT_PASSWORD }}@mongodb:27017/${{ secrets.MONGO_DATABASE }}?authSource=admin",
              "      - SESSION_SECRET=${{ secrets.SESSION_SECRET }}",
              "      - GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}",
              "      - GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}",
              "      - GOOGLE_CALLBACK_URL=${{ secrets.GOOGLE_CALLBACK_URL }}",
              "    volumes:",
              "      - uploads_data:/app/server/uploads",
              "    ports:",
              "      - \"8000:8000\"",
              "    depends_on:",
              "      mongodb:",
              "        condition: service_healthy",
              "    networks:",
              "      - app-network",
              "    healthcheck:",
              "      test:",
              "        [",
              "          \"CMD\",",
              "          \"wget\",",
              "          \"--no-verbose\",",
              "          \"--tries=1\",",
              "          \"--spider\",",
              "          \"http://localhost:8000/health\",",
              "        ]",
              "      interval: 30s",
              "      timeout: 10s",
              "      retries: 3",
              "",
              "  frontend:",
              "    image: \"${{ steps.ecr-repos.outputs.frontend_repo_url }}:${{ steps.version.outputs.version }}\"",
              "    container_name: instamastadongram-frontend",
              "    restart: unless-stopped",
              "    ports:",
              "      - \"80:80\"",
              "    depends_on:",
              "      backend:",
              "        condition: service_healthy",
              "    networks:",
              "      - app-network",
              "    healthcheck:",
              "      test:",
              "        [",
              "          \"CMD\",",
              "          \"wget\",",
              "          \"--no-verbose\",",
              "          \"--tries=1\",",
              "          \"--spider\",",
              "          \"http://localhost:80/\",",
              "        ]",
              "      interval: 30s",
              "      timeout: 10s",
              "      retries: 3",
              "",
              "volumes:",
              "  mongodb_data:",
              "    driver: local",
              "  uploads_data:",
              "    driver: local",
              "",
              "networks:",
              "  app-network:",
              "    driver: bridge",
              "EOF"
            ]' \
            --region ${{ env.AWS_REGION }}

          # Wait for command to complete
          sleep 10

          # Execute deployment script
          echo "Executing deployment script on EC2..."
          aws ssm send-command \
            --instance-ids ${{ steps.ec2-instance.outputs.instance_id }} \
            --document-name "AWS-RunShellScript" \
            --parameters 'commands=["chmod +x ~/deployment/deploy-ec2.sh", "cd ~/deployment && ./deploy-ec2.sh"]' \
            --region ${{ env.AWS_REGION }}

      - name: Wait for deployment
        run: |
          echo "Waiting 60 seconds for containers to start..."
          sleep 60

      - name: Health check backend
        run: |
          echo "Checking backend health at http://${{ steps.ec2-ip.outputs.public_ip }}:8000/health"
          for i in {1..10}; do
            if curl -f -s http://${{ steps.ec2-ip.outputs.public_ip }}:8000/health > /dev/null; then
              echo "Backend health check passed"
              break
            else
              echo "Backend health check attempt $i/10 failed, retrying in 5 seconds..."
              if [ $i -eq 10 ]; then
                echo "Backend health check failed after 10 attempts"
                exit 1
              fi
              sleep 5
            fi
          done

      - name: Health check frontend
        run: |
          echo "Checking frontend health at http://${{ steps.ec2-ip.outputs.public_ip }}"
          for i in {1..10}; do
            if curl -f -s http://${{ steps.ec2-ip.outputs.public_ip }} > /dev/null; then
              echo "Frontend health check passed"
              break
            else
              echo "Frontend health check attempt $i/10 failed, retrying in 5 seconds..."
              if [ $i -eq 10 ]; then
                echo "Frontend health check failed after 10 attempts"
                exit 1
              fi
              sleep 5
            fi
          done

      - name: Deployment summary
        run: |
          echo "Full CI/CD Pipeline Completed Successfully!"
          echo ""
          echo "Application Details:"
          echo "   Application URL: http://${{ steps.ec2-ip.outputs.public_ip }}"
          echo "   Backend API: http://${{ steps.ec2-ip.outputs.public_ip }}:8000"
          echo ""
          echo "Deployed Images:"
          echo "   Backend: ${{ steps.ecr-repos.outputs.backend_repo_url }}:${{ steps.version.outputs.version }}"
          echo "   Frontend: ${{ steps.ecr-repos.outputs.frontend_repo_url }}:${{ steps.version.outputs.version }}"
          echo ""
          echo "All health checks passed!"
          echo "Application is live and ready for use!"
